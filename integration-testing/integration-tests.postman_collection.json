{
  "info": {
    "_postman_id": "6f49a607-0204-4e54-abf1-f6270dd91bff",
    "name": "moodify integration test",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "14834479"
  },
  "item": [
    {
      "name": "Song Service send message",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {\r",
              "  pm.expect(pm.response.code).to.equal(200);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response time is less than 500ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Content type is text/plain\", function () {\r",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Message is a non-empty string\", function () {\r",
              "    const responseData = pm.response.text();\r",
              "\r",
              "    pm.expect(responseData).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Response should not be empty\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "http://integration-song-service:8080/message/lalala",
          "protocol": "http",
          "host": ["integration-song-service"],
          "port": "8080",
          "path": ["message", "lalala"],
          "query": [
            {
              "key": "message",
              "value": null,
              "disabled": true
            },
            {
              "key": "message",
              "value": "lalalalalala",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Song Service send message 2",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {\r",
              "  pm.expect(pm.response.code).to.equal(200);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response time is less than 500ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Content type is text/plain\", function () {\r",
              "    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Message is a non-empty string\", function () {\r",
              "    const responseData = pm.response.text();\r",
              "\r",
              "    pm.expect(responseData).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Response should not be empty\");\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "url": {
          "raw": "http://integration-song-service:8080/message/popopo",
          "protocol": "http",
          "host": ["integration-song-service"],
          "port": "8080",
          "path": ["message", "popopo"],
          "query": [
            {
              "key": "message",
              "value": null,
              "disabled": true
            },
            {
              "key": "message",
              "value": "lalalalalala",
              "disabled": true
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "analytics get messages",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response status code is 200\", function () {\r",
              "    pm.expect(pm.response.code).to.equal(200);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response time is less than 200ms\", function () {\r",
              "  pm.expect(pm.response.responseTime).to.be.below(200);\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response has the required fields - id and message\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
              "    responseData.forEach(function(item){\r",
              "        pm.expect(item).to.have.property('id');\r",
              "        pm.expect(item).to.have.property('message');\r",
              "    });\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Id is a non-negative integer\", function () {\r",
              "    const responseData = pm.response.json();\r",
              "    \r",
              "    responseData.forEach(function(item) {\r",
              "        pm.expect(item.id).to.be.a('number').and.to.be.at.least(0);\r",
              "    });\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Message is a non-empty string\", function () {\r",
              "  const responseData = pm.response.json();\r",
              "  \r",
              "  responseData.forEach(function(item) {\r",
              "    pm.expect(item.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
              "  });\r",
              "});\r",
              "\r",
              "\r",
              "pm.test(\"Response body matches the current response\", function () {\r",
              "    const currentResponse = [{\"id\":1,\"message\":\"lalala\"},{\"id\":2,\"message\":\"popopo\"}]\r",
              "    pm.expect(pm.response.json()).to.eql(currentResponse);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "http://integration-analytics-service:8080/messages",
          "protocol": "http",
          "host": ["integration-analytics-service"],
          "port": "8080",
          "path": ["messages"]
        }
      },
      "response": []
    }
  ]
}
